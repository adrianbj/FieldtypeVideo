<?php

/**
 * ProcessWire Video Fieldtype
 * by Adrian Jones
 *
 * Fieldtype for uploading video files and creating poster images.
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypeVideo extends FieldtypeFile {


    public static function getModuleInfo() {
        return array(
            'title' => __('Video Fieldtype', __FILE__), // Module Title
            'summary' => __('Fieldtype for uploading video files and creating poster images.', __FILE__), // Module Summary
            'version' => 1,
            'author' => 'Adrian Jones',
            'href' => '',
            'installs' => 'InputfieldVideo'
        );
    }

        public function getBlankValue(Page $page, Field $field) {
        $pageimages = new Pageimages($page);
        $pageimages->setTrackChanges(true);
        return $pageimages;
    }

    protected function getBlankPagefile(Pagefiles $pagefiles, $filename) {
        return new Pageimage($pagefiles, $filename);
    }


    /**
     * Perform output formatting on the value delivered to the API
     *
     * Entity encode the file's description field.
     *
     * If the maxFiles setting is 1, then we format the value to dereference as single Pagefile rather than a PagefilesArray
     *
     * This methos is only used when $page->outputFormatting is true.
     *
     */
    public function ___formatValue(Page $page, Field $field, $value) {

        if(!$value instanceof Pagefiles) return $value;

        //if($field->entityEncode) {
            foreach($value as $k => $v) {
                if($v->formatted()) continue;
                $v->description = 'htmlspecialchars($v->description, ENT_QUOTES, "UTF-8")';
                $v->tags = htmlspecialchars($v->tags, ENT_QUOTES, "UTF-8");
                $v->poster = str_replace('mp4','jpg',$v->url);
                $v->formatted = true;
            }
        //}

        if($field->maxFiles == 1) {
            if(count($value)) $value = $value->first();
                else $value = null;
        }

        return $value;
    }



    public function getInputfield(Page $page, Field $field) {

        // even though we don't want this input field, call it anyway
        parent::getInputfield($page, $field);

        $inputfield = $this->modules->get("InputfieldVideo");
        $inputfield->class = $this->className();

        $this->setupHooks($page, $field, $inputfield);

        return $inputfield;
    }


    protected function getDefaultFileExtensions() {
        return "mp4";
    }

}