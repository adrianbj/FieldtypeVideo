<?php

/**
 * ProcessWire Video Fieldtype
 * by Adrian Jones
 *
 * Fieldtype for uploading video files and creating poster images.
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypeVideo extends FieldtypeFile implements Module, ConfigurableModule {


    public static function getModuleInfo() {
        return array(
            'title' => __('Video Fieldtype', __FILE__), // Module Title
            'summary' => __('Fieldtype for uploading video files and creating poster images.', __FILE__), // Module Summary
            'version' => 10,
            'author' => 'Adrian Jones',
            'href' => '',
            'installs' => 'InputfieldVideo',
            'icon'     => 'file-video-o'
        );
    }


    protected static $configDefaults = array(
        // global
        "sublime_video_token" => ""
    );

    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();

    public function init() {
        $this->addHook('ProcessPageView::execute', $this, 'addScripts');
    }



    public function addScripts($event) {
        $page = $event->object;

        // don't add this to the admin pages
        if($page->template == 'admin') return;

        $additionalHeadScripts = '<script type="text/javascript" src="//cdn.sublimevideo.net/js/'.$this->sublime_video_token.'.js"></script>';
        $event->return = str_replace("</head>", $additionalHeadScripts.'</head>', $event->return);
    }

        /**
         * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
     *
         * @param Page $page
         * @param Field $field
         * @param string|int|array $value
         * @return string|int|array|object $value
         *
         */
        public function ___wakeupValue(Page $page, Field $field, $value) {

            if($value instanceof Pagefiles) return $value;
            $pagefiles = $this->getBlankValue($page, $field);
            if(empty($value)) return $pagefiles;

            if(!is_array($value) || array_key_exists('data', $value)) $value = array($value);
            foreach($value as $v) {
                if(empty($v['data'])) continue;
                $pagefile = $this->getBlankPagefile($pagefiles, $v['data']);
                $pagefile->description = $v['description'];
                if(isset($v['modified'])) $pagefile->modified = $v['modified'];
                if(isset($v['created'])) $pagefile->created = $v['created'];
                if(isset($v['tags'])) $pagefile->tags = $v['tags'];
                if(isset($v['poster'])) $pagefile->poster = $v['poster'];
                if(isset($v['subtitles'])) $pagefile->subtitles = $v['subtitles'];
                $pagefile->setTrackChanges(true);
                $pagefiles->add($pagefile);
            }

            $pagefiles->resetTrackChanges(true);
            return $pagefiles;
        }

        /**
         * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
         *
         * @param Page $page
         * @param Field $field
         * @param string|int|array|object $value
         * @return string|int
         *
         */
        public function ___sleepValue(Page $page, Field $field, $value) {

        $sleepValue = array();
        if(!$value instanceof Pagefiles) return $sleepValue;

        foreach($value as $pagefile) {
            $item = array(
                'data' => $pagefile->basename,
                'description' => $pagefile->description,
                'poster' => $pagefile->poster,
                'subtitles' => $pagefile->subtitles,
                );

            if($field->fileSchema & self::fileSchemaDate) {
                $item['modified'] = date('Y-m-d H:i:s', $pagefile->modified);
                $item['created'] = date('Y-m-d H:i:s', $pagefile->created);
            }

            if($field->fileSchema & self::fileSchemaTags) {
                $item['tags'] = $pagefile->tags;
            }

            $sleepValue[] = $item;
        }
        return $sleepValue;
        }


        public function getBlankValue(Page $page, Field $field) {
        $pageimages = new Pageimages($page);
        $pageimages->setTrackChanges(true);
        return $pageimages;
    }

    protected function getBlankPagefile(Pagefiles $pagefiles, $filename) {
        return new Pageimage($pagefiles, $filename);
    }


    /**
     * Perform output formatting on the value delivered to the API
     *
     * Entity encode the file's description field.
     *
     * If the maxFiles setting is 1, then we format the value to dereference as single Pagefile rather than a PagefilesArray
     *
     * This methos is only used when $page->outputFormatting is true.
     *
     */
    public function ___formatValue(Page $page, Field $field, $value) {

        if(!$value instanceof Pagefiles) return $value;

        //if($field->entityEncode) {
            foreach($value as $k => $v) {
                if($v->formatted()) continue;
                $v->description = htmlspecialchars($v->description, ENT_QUOTES, "UTF-8");
                $v->tags = htmlspecialchars($v->tags, ENT_QUOTES, "UTF-8");
                //$v->poster = str_replace('mp4','jpg',$v->url);
                $v->poster = pathinfo($v->url, PATHINFO_DIRNAME) . '/' . $v->poster;
                //$v->subtitles = pathinfo($v->url, PATHINFO_DIRNAME) . '/' . $v->subtitles;

                $transcript_items = explode("\r\n", $v->subtitles);

                $i=0;
                $last_line = '';
                $prev_last_line = '';
                foreach ($transcript_items as $key => $line) {

                    if($i==0 || $i==1 || $last_line == '' || $prev_last_line == ''){
                        unset($transcript_items[$key]);
                    }

                    $prev_last_line = $last_line;
                    $last_line = $line;

                    $i++;
                }


                $v->transcript = str_replace('<br /><br />','<br />', implode("<br />", $transcript_items));

                $v->subtitles = str_replace('mp4','srt',$v->url);

                list($width, $height) = getimagesize($this->page->filesManager()->path() . basename($v->poster));

                $v->play = '<video class="sublime" width="'.$width.'" height="'.$height.'" title="'.$v->description.'" poster="'.$v->poster.'" preload="none">
                                <source src="'.$v->url.'" />';
                                if(file_exists($this->page->filesManager()->path() . basename($v->subtitles))) $v->play .= '<track src="'.$v->subtitles.'" srclang="en" />';
                $v->play .= "\n</video>";

                $v->formatted = true;
            }


        //}

        if($field->maxFiles == 1) {
            if(count($value)) $value = $value->first();
                else $value = null;
        }

        return $value;
    }




public function getDatabaseSchema(Field $field) {

        $schema = parent::getDatabaseSchema($field);

        $schema['data'] = 'varchar(255) NOT NULL';
        $schema['description'] = "text NOT NULL";
        $schema['poster'] = 'varchar(255) NOT NULL';
        $schema['subtitles'] = 'text NOT NULL';
        $schema['modified'] = "datetime";
        $schema['created'] = "datetime";
        $schema['keys']['description'] = 'FULLTEXT KEY description (description)';
        $schema['keys']['poster'] = 'index (poster)';
        //$schema['keys']['subtitles'] = 'index (subtitles)';
        $schema['keys']['modified'] = 'index (modified)';
        $schema['keys']['created'] = 'index (created)';

        /*if($field->id && !($field->fileSchema & self::fileSchemaDate)) {
            // permanently add new 'modified' and 'created' column to file schema
            $addDates = false;

            try {
                $result = $this->db->query("SHOW COLUMNS FROM `{$field->table}` WHERE Field='modified'");
                if($result->num_rows) {
                    $field->fileSchema = $field->fileSchema | self::fileSchemaDate;
                    $field->save();
                } else {
                    $addDates = true;
                }
            } catch(Exception $e) {
                // intentionally blank
            }

            if($addDates) try {
                $this->db->query("ALTER TABLE `{$field->table}` ADD `modified` $schema[modified]");
                $this->db->query("ALTER TABLE `{$field->table}` ADD `created` $schema[created]");
                $this->db->query("ALTER TABLE `{$field->table}` ADD " . $schema['keys']['modified']);
                $this->db->query("ALTER TABLE `{$field->table}` ADD " . $schema['keys']['created']);
                $field->fileSchema = $field->fileSchema | self::fileSchemaDate;
                $field->save();
                $date = date('Y-m-d H:i:s');
                $this->db->query("UPDATE `{$field->table}` SET created='$date', modified='$date'");
                $this->message("Added created/modified to DB schema for '{$field->name}'");
            } catch(Exception $e) {
                $result = $this->db->query("SHOW COLUMNS FROM `{$field->table}` WHERE Field='modified'");
                if($result->num_rows) {
                    $field->fileSchema = $field->fileSchema | self::fileSchemaDate;
                    $field->save();
                } else {
                    $this->error("Error adding created/modified to '{$field->name}' schema");
                }

            }
        }*/

        $tagsAction = null; // null=no change; 1=add tags, 0=remove tags
        $schemaTags = 'varchar(255) NOT NULL';
        $schemaTagsIndex = 'FULLTEXT KEY tags (tags)';

        if($field->useTags && !($field->fileSchema & self::fileSchemaTags)) $tagsAction = 'add';
            else if(!$field->useTags && ($field->fileSchema & self::fileSchemaTags)) $tagsAction = 'remove';

        if($tagsAction === 'add') {
            // add tags field
            try {
                $this->db->query("ALTER TABLE `{$field->table}` ADD tags $schemaTags");
                $this->db->query("ALTER TABLE `{$field->table}` ADD $schemaTagsIndex");
                $field->fileSchema = $field->fileSchema | self::fileSchemaTags;
                $field->save();
                $this->message("Added tags to DB schema for '{$field->name}'");
            } catch(Exception $e) {
                $this->error("Error adding tags to '{$field->name}' schema");
            }

        } else if($tagsAction === 'remove') {
            // remove tags field
            try {
                $this->db->query("ALTER TABLE `{$field->table}` DROP INDEX tags");
                $this->db->query("ALTER TABLE `{$field->table}` DROP tags");
                $field->fileSchema = $field->fileSchema & ~self::fileSchemaTags;
                $field->save();
                $this->message("Dropped tags from DB schema for '{$field->name}'");
            } catch(Exception $e) {
                $this->error("Error dropping tags from '{$field->name}' schema");
            }
        }

        if($field->fileSchema & self::fileSchemaTags) {
            $schema['tags'] = $schemaTags;
            $schema['keys']['tags'] = $schemaTagsIndex;
        }

        return $schema;
    }





    public function getInputfield(Page $page, Field $field) {

        // even though we don't want this input field, call it anyway
        parent::getInputfield($page, $field);

        $inputfield = $this->modules->get("InputfieldVideo");
        $inputfield->class = $this->className();

        $this->setupHooks($page, $field, $inputfield);

        return $inputfield;
    }


    protected function getDefaultFileExtensions() {
        return "mp4";
    }


    /**
     * Get any inputfields used for configuration of this Fieldtype.
     *
     * This is in addition to any configuration fields supplied by the parent Inputfield.
     *
     * @param Field $field
     * @return InputfieldWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $modules = wire('modules');

        foreach(self::$configDefaults as $key => $value) {
            if(!isset($data[$key]) || $data[$key]=='' || $data[$key]=='~') $data[$key] = $value;
        }

        $inputfields = new InputfieldWrapper();

        $f = $modules->get("InputfieldText");
        $f->attr('name', 'sublime_video_token');
        $f->attr('value', $data["sublime_video_token"]);
        $f->attr('size', 20);
        $f->label = __('Sublime Video Token');
        $f->description = __('Your token from Sublime Video.');
        $inputfields->add($f);

        return $inputfields;
    }


}